// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceClient is the client API for Workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceClient interface {
	Get(ctx context.Context, opts ...grpc.CallOption) (Workspace_GetClient, error)
	Output(ctx context.Context, in *WSID, opts ...grpc.CallOption) (*WSOutput, error)
}

type workspaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceClient(cc grpc.ClientConnInterface) WorkspaceClient {
	return &workspaceClient{cc}
}

func (c *workspaceClient) Get(ctx context.Context, opts ...grpc.CallOption) (Workspace_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Workspace_serviceDesc.Streams[0], "/latexmk.Workspace/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceGetClient{stream}
	return x, nil
}

type Workspace_GetClient interface {
	Send(*WSReq) error
	Recv() (*WS, error)
	grpc.ClientStream
}

type workspaceGetClient struct {
	grpc.ClientStream
}

func (x *workspaceGetClient) Send(m *WSReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workspaceGetClient) Recv() (*WS, error) {
	m := new(WS)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceClient) Output(ctx context.Context, in *WSID, opts ...grpc.CallOption) (*WSOutput, error) {
	out := new(WSOutput)
	err := c.cc.Invoke(ctx, "/latexmk.Workspace/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServer is the server API for Workspace service.
// All implementations must embed UnimplementedWorkspaceServer
// for forward compatibility
type WorkspaceServer interface {
	Get(Workspace_GetServer) error
	Output(context.Context, *WSID) (*WSOutput, error)
	mustEmbedUnimplementedWorkspaceServer()
}

// UnimplementedWorkspaceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServer struct {
}

func (UnimplementedWorkspaceServer) Get(Workspace_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceServer) Output(context.Context, *WSID) (*WSOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedWorkspaceServer) mustEmbedUnimplementedWorkspaceServer() {}

// UnsafeWorkspaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServer will
// result in compilation errors.
type UnsafeWorkspaceServer interface {
	mustEmbedUnimplementedWorkspaceServer()
}

func RegisterWorkspaceServer(s grpc.ServiceRegistrar, srv WorkspaceServer) {
	s.RegisterService(&_Workspace_serviceDesc, srv)
}

func _Workspace_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkspaceServer).Get(&workspaceGetServer{stream})
}

type Workspace_GetServer interface {
	Send(*WS) error
	Recv() (*WSReq, error)
	grpc.ServerStream
}

type workspaceGetServer struct {
	grpc.ServerStream
}

func (x *workspaceGetServer) Send(m *WS) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workspaceGetServer) Recv() (*WSReq, error) {
	m := new(WSReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Workspace_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WSID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/latexmk.Workspace/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Output(ctx, req.(*WSID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workspace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "latexmk.Workspace",
	HandlerType: (*WorkspaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Output",
			Handler:    _Workspace_Output_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Workspace_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
